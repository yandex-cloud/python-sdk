"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ImageProductUsageServiceStub:
    """A set of methods for managing image product's usage."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Write: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2.WriteImageProductUsageRequest,
        yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2.WriteImageProductUsageResponse,
    ]
    """Writes image product's usage. Authentication is by user's service account."""

class ImageProductUsageServiceAsyncStub:
    """A set of methods for managing image product's usage."""

    Write: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2.WriteImageProductUsageRequest,
        yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2.WriteImageProductUsageResponse,
    ]
    """Writes image product's usage. Authentication is by user's service account."""

class ImageProductUsageServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing image product's usage."""

    @abc.abstractmethod
    def Write(
        self,
        request: yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2.WriteImageProductUsageRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2.WriteImageProductUsageResponse, collections.abc.Awaitable[yandex.cloud.marketplace.metering.v1.image_product_usage_service_pb2.WriteImageProductUsageResponse]]:
        """Writes image product's usage. Authentication is by user's service account."""

def add_ImageProductUsageServiceServicer_to_server(servicer: ImageProductUsageServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
