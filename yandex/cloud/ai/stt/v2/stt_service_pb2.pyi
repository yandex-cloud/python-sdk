"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class LongRunningRecognitionRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_FIELD_NUMBER: builtins.int
    AUDIO_FIELD_NUMBER: builtins.int
    @property
    def config(self) -> global___RecognitionConfig: ...
    @property
    def audio(self) -> global___RecognitionAudio: ...
    def __init__(
        self,
        *,
        config: global___RecognitionConfig | None = ...,
        audio: global___RecognitionAudio | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["audio", b"audio", "config", b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["audio", b"audio", "config", b"config"]) -> None: ...

global___LongRunningRecognitionRequest = LongRunningRecognitionRequest

@typing.final
class LongRunningRecognitionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHUNKS_FIELD_NUMBER: builtins.int
    @property
    def chunks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionResult]: ...
    def __init__(
        self,
        *,
        chunks: collections.abc.Iterable[global___SpeechRecognitionResult] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["chunks", b"chunks"]) -> None: ...

global___LongRunningRecognitionResponse = LongRunningRecognitionResponse

@typing.final
class StreamingRecognitionRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_FIELD_NUMBER: builtins.int
    AUDIO_CONTENT_FIELD_NUMBER: builtins.int
    audio_content: builtins.bytes
    @property
    def config(self) -> global___RecognitionConfig: ...
    def __init__(
        self,
        *,
        config: global___RecognitionConfig | None = ...,
        audio_content: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["audio_content", b"audio_content", "config", b"config", "streaming_request", b"streaming_request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["audio_content", b"audio_content", "config", b"config", "streaming_request", b"streaming_request"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["streaming_request", b"streaming_request"]) -> typing.Literal["config", "audio_content"] | None: ...

global___StreamingRecognitionRequest = StreamingRecognitionRequest

@typing.final
class StreamingRecognitionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHUNKS_FIELD_NUMBER: builtins.int
    @property
    def chunks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionChunk]: ...
    def __init__(
        self,
        *,
        chunks: collections.abc.Iterable[global___SpeechRecognitionChunk] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["chunks", b"chunks"]) -> None: ...

global___StreamingRecognitionResponse = StreamingRecognitionResponse

@typing.final
class RecognitionAudio(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTENT_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    content: builtins.bytes
    uri: builtins.str
    def __init__(
        self,
        *,
        content: builtins.bytes = ...,
        uri: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["audio_source", b"audio_source", "content", b"content", "uri", b"uri"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["audio_source", b"audio_source", "content", b"content", "uri", b"uri"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["audio_source", b"audio_source"]) -> typing.Literal["content", "uri"] | None: ...

global___RecognitionAudio = RecognitionAudio

@typing.final
class RecognitionConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SPECIFICATION_FIELD_NUMBER: builtins.int
    FOLDER_ID_FIELD_NUMBER: builtins.int
    folder_id: builtins.str
    @property
    def specification(self) -> global___RecognitionSpec: ...
    def __init__(
        self,
        *,
        specification: global___RecognitionSpec | None = ...,
        folder_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["specification", b"specification"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["folder_id", b"folder_id", "specification", b"specification"]) -> None: ...

global___RecognitionConfig = RecognitionConfig

@typing.final
class RecognitionSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _AudioEncoding:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _AudioEncodingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RecognitionSpec._AudioEncoding.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        AUDIO_ENCODING_UNSPECIFIED: RecognitionSpec._AudioEncoding.ValueType  # 0
        LINEAR16_PCM: RecognitionSpec._AudioEncoding.ValueType  # 1
        """16-bit signed little-endian (Linear PCM)"""
        OGG_OPUS: RecognitionSpec._AudioEncoding.ValueType  # 2
        MP3: RecognitionSpec._AudioEncoding.ValueType  # 3
        """transcription only"""

    class AudioEncoding(_AudioEncoding, metaclass=_AudioEncodingEnumTypeWrapper): ...
    AUDIO_ENCODING_UNSPECIFIED: RecognitionSpec.AudioEncoding.ValueType  # 0
    LINEAR16_PCM: RecognitionSpec.AudioEncoding.ValueType  # 1
    """16-bit signed little-endian (Linear PCM)"""
    OGG_OPUS: RecognitionSpec.AudioEncoding.ValueType  # 2
    MP3: RecognitionSpec.AudioEncoding.ValueType  # 3
    """transcription only"""

    AUDIO_ENCODING_FIELD_NUMBER: builtins.int
    SAMPLE_RATE_HERTZ_FIELD_NUMBER: builtins.int
    LANGUAGE_CODE_FIELD_NUMBER: builtins.int
    PROFANITY_FILTER_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    PARTIAL_RESULTS_FIELD_NUMBER: builtins.int
    SINGLE_UTTERANCE_FIELD_NUMBER: builtins.int
    AUDIO_CHANNEL_COUNT_FIELD_NUMBER: builtins.int
    RAW_RESULTS_FIELD_NUMBER: builtins.int
    LITERATURE_TEXT_FIELD_NUMBER: builtins.int
    audio_encoding: global___RecognitionSpec.AudioEncoding.ValueType
    sample_rate_hertz: builtins.int
    """8000, 16000, 48000 only for pcm"""
    language_code: builtins.str
    """code in BCP-47"""
    profanity_filter: builtins.bool
    model: builtins.str
    partial_results: builtins.bool
    """If set true, tentative hypotheses may be returned as they become available (final=false flag)
    If false or omitted, only final=true result(s) are returned.
    Makes sense only for StreamingRecognize requests.
    """
    single_utterance: builtins.bool
    audio_channel_count: builtins.int
    """Used only for long running recognize."""
    raw_results: builtins.bool
    """This mark allows disable normalization text"""
    literature_text: builtins.bool
    """Rewrite text in literature style (default: false)"""
    def __init__(
        self,
        *,
        audio_encoding: global___RecognitionSpec.AudioEncoding.ValueType = ...,
        sample_rate_hertz: builtins.int = ...,
        language_code: builtins.str = ...,
        profanity_filter: builtins.bool = ...,
        model: builtins.str = ...,
        partial_results: builtins.bool = ...,
        single_utterance: builtins.bool = ...,
        audio_channel_count: builtins.int = ...,
        raw_results: builtins.bool = ...,
        literature_text: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["audio_channel_count", b"audio_channel_count", "audio_encoding", b"audio_encoding", "language_code", b"language_code", "literature_text", b"literature_text", "model", b"model", "partial_results", b"partial_results", "profanity_filter", b"profanity_filter", "raw_results", b"raw_results", "sample_rate_hertz", b"sample_rate_hertz", "single_utterance", b"single_utterance"]) -> None: ...

global___RecognitionSpec = RecognitionSpec

@typing.final
class SpeechRecognitionChunk(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALTERNATIVES_FIELD_NUMBER: builtins.int
    FINAL_FIELD_NUMBER: builtins.int
    END_OF_UTTERANCE_FIELD_NUMBER: builtins.int
    final: builtins.bool
    """This flag shows that the received chunk contains a part of the recognized text that won't be changed."""
    end_of_utterance: builtins.bool
    """This flag shows that the received chunk is the end of an utterance."""
    @property
    def alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionAlternative]: ...
    def __init__(
        self,
        *,
        alternatives: collections.abc.Iterable[global___SpeechRecognitionAlternative] | None = ...,
        final: builtins.bool = ...,
        end_of_utterance: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["alternatives", b"alternatives", "end_of_utterance", b"end_of_utterance", "final", b"final"]) -> None: ...

global___SpeechRecognitionChunk = SpeechRecognitionChunk

@typing.final
class SpeechRecognitionResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALTERNATIVES_FIELD_NUMBER: builtins.int
    CHANNEL_TAG_FIELD_NUMBER: builtins.int
    channel_tag: builtins.int
    @property
    def alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpeechRecognitionAlternative]: ...
    def __init__(
        self,
        *,
        alternatives: collections.abc.Iterable[global___SpeechRecognitionAlternative] | None = ...,
        channel_tag: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["alternatives", b"alternatives", "channel_tag", b"channel_tag"]) -> None: ...

global___SpeechRecognitionResult = SpeechRecognitionResult

@typing.final
class SpeechRecognitionAlternative(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEXT_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    WORDS_FIELD_NUMBER: builtins.int
    text: builtins.str
    confidence: builtins.float
    @property
    def words(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordInfo]: ...
    def __init__(
        self,
        *,
        text: builtins.str = ...,
        confidence: builtins.float = ...,
        words: collections.abc.Iterable[global___WordInfo] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["confidence", b"confidence", "text", b"text", "words", b"words"]) -> None: ...

global___SpeechRecognitionAlternative = SpeechRecognitionAlternative

@typing.final
class WordInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    WORD_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    word: builtins.str
    confidence: builtins.float
    @property
    def start_time(self) -> google.protobuf.duration_pb2.Duration: ...
    @property
    def end_time(self) -> google.protobuf.duration_pb2.Duration: ...
    def __init__(
        self,
        *,
        start_time: google.protobuf.duration_pb2.Duration | None = ...,
        end_time: google.protobuf.duration_pb2.Duration | None = ...,
        word: builtins.str = ...,
        confidence: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["end_time", b"end_time", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["confidence", b"confidence", "end_time", b"end_time", "start_time", b"start_time", "word", b"word"]) -> None: ...

global___WordInfo = WordInfo
