"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Message(google.protobuf.message.Message):
    """The text descriptions and weights that the model uses to generate an image."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEXT_FIELD_NUMBER: builtins.int
    WEIGHT_FIELD_NUMBER: builtins.int
    text: builtins.str
    """Text describing the image."""
    weight: builtins.float
    """Message weight. Negative values indicate negative messages. Note: Currently not supported."""
    def __init__(
        self,
        *,
        text: builtins.str = ...,
        weight: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["text", b"text", "weight", b"weight"]) -> None: ...

global___Message = Message

@typing.final
class AspectRatio(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WIDTH_RATIO_FIELD_NUMBER: builtins.int
    HEIGHT_RATIO_FIELD_NUMBER: builtins.int
    width_ratio: builtins.int
    """Weight of width in image."""
    height_ratio: builtins.int
    """Weight of height in image."""
    def __init__(
        self,
        *,
        width_ratio: builtins.int = ...,
        height_ratio: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["height_ratio", b"height_ratio", "width_ratio", b"width_ratio"]) -> None: ...

global___AspectRatio = AspectRatio

@typing.final
class ImageGenerationOptions(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MIME_TYPE_FIELD_NUMBER: builtins.int
    SEED_FIELD_NUMBER: builtins.int
    ASPECT_RATIO_FIELD_NUMBER: builtins.int
    mime_type: builtins.str
    """The [MIME type](https://en.wikipedia.org/wiki/Media_type) of generated image format.
    For possible specifications, see [documentation](/docs/foundation-models/concepts).
    """
    seed: builtins.int
    """Seed for image generation. It serves as a starting point for image generation from noise. If set to 0 or not provided, a randomly generated value will be used."""
    @property
    def aspect_ratio(self) -> global___AspectRatio:
        """Aspect ratio of generated image."""

    def __init__(
        self,
        *,
        mime_type: builtins.str = ...,
        seed: builtins.int = ...,
        aspect_ratio: global___AspectRatio | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["aspect_ratio", b"aspect_ratio"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aspect_ratio", b"aspect_ratio", "mime_type", b"mime_type", "seed", b"seed"]) -> None: ...

global___ImageGenerationOptions = ImageGenerationOptions
