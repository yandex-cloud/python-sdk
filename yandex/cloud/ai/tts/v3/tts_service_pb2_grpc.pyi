"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.ai.tts.v3.tts_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SynthesizerStub:
    """A set of methods for voice synthesis."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    UtteranceSynthesis: grpc.UnaryStreamMultiCallable[
        yandex.cloud.ai.tts.v3.tts_pb2.UtteranceSynthesisRequest,
        yandex.cloud.ai.tts.v3.tts_pb2.UtteranceSynthesisResponse,
    ]
    """Synthesizing text into speech."""

class SynthesizerAsyncStub:
    """A set of methods for voice synthesis."""

    UtteranceSynthesis: grpc.aio.UnaryStreamMultiCallable[
        yandex.cloud.ai.tts.v3.tts_pb2.UtteranceSynthesisRequest,
        yandex.cloud.ai.tts.v3.tts_pb2.UtteranceSynthesisResponse,
    ]
    """Synthesizing text into speech."""

class SynthesizerServicer(metaclass=abc.ABCMeta):
    """A set of methods for voice synthesis."""

    @abc.abstractmethod
    def UtteranceSynthesis(
        self,
        request: yandex.cloud.ai.tts.v3.tts_pb2.UtteranceSynthesisRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[yandex.cloud.ai.tts.v3.tts_pb2.UtteranceSynthesisResponse], collections.abc.AsyncIterator[yandex.cloud.ai.tts.v3.tts_pb2.UtteranceSynthesisResponse]]:
        """Synthesizing text into speech."""

def add_SynthesizerServicer_to_server(servicer: SynthesizerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
