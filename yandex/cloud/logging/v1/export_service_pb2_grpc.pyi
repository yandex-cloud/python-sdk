"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.access.access_pb2
import yandex.cloud.logging.v1.export_pb2
import yandex.cloud.logging.v1.export_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ExportServiceStub:
    """A set of methods for managing log exports."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Run: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.RunExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Run new logs export from log group to sink"""

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.GetExportRequest,
        yandex.cloud.logging.v1.export_pb2.Export,
    ]
    """Returns the specified export.

    To get the list of all available exports, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.ListExportsRequest,
        yandex.cloud.logging.v1.export_service_pb2.ListExportsResponse,
    ]
    """Retrieves the list of exports in the specified folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.CreateExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a export in the specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.UpdateExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified export."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.DeleteExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified export."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.ListExportOperationsRequest,
        yandex.cloud.logging.v1.export_service_pb2.ListExportOperationsResponse,
    ]
    """Lists operations for the specified export."""

    ListAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        yandex.cloud.access.access_pb2.ListAccessBindingsResponse,
    ]
    """Lists existing access bindings for the specified export."""

    SetAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Sets access bindings for the specified export."""

    UpdateAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates access bindings for the specified export."""

class ExportServiceAsyncStub:
    """A set of methods for managing log exports."""

    Run: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.RunExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Run new logs export from log group to sink"""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.GetExportRequest,
        yandex.cloud.logging.v1.export_pb2.Export,
    ]
    """Returns the specified export.

    To get the list of all available exports, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.ListExportsRequest,
        yandex.cloud.logging.v1.export_service_pb2.ListExportsResponse,
    ]
    """Retrieves the list of exports in the specified folder."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.CreateExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a export in the specified folder."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.UpdateExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified export."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.DeleteExportRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified export."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.export_service_pb2.ListExportOperationsRequest,
        yandex.cloud.logging.v1.export_service_pb2.ListExportOperationsResponse,
    ]
    """Lists operations for the specified export."""

    ListAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        yandex.cloud.access.access_pb2.ListAccessBindingsResponse,
    ]
    """Lists existing access bindings for the specified export."""

    SetAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Sets access bindings for the specified export."""

    UpdateAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates access bindings for the specified export."""

class ExportServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing log exports."""

    @abc.abstractmethod
    def Run(
        self,
        request: yandex.cloud.logging.v1.export_service_pb2.RunExportRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Run new logs export from log group to sink"""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.logging.v1.export_service_pb2.GetExportRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.logging.v1.export_pb2.Export, collections.abc.Awaitable[yandex.cloud.logging.v1.export_pb2.Export]]:
        """Returns the specified export.

        To get the list of all available exports, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.logging.v1.export_service_pb2.ListExportsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.logging.v1.export_service_pb2.ListExportsResponse, collections.abc.Awaitable[yandex.cloud.logging.v1.export_service_pb2.ListExportsResponse]]:
        """Retrieves the list of exports in the specified folder."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.logging.v1.export_service_pb2.CreateExportRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a export in the specified folder."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.logging.v1.export_service_pb2.UpdateExportRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified export."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.logging.v1.export_service_pb2.DeleteExportRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified export."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.logging.v1.export_service_pb2.ListExportOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.logging.v1.export_service_pb2.ListExportOperationsResponse, collections.abc.Awaitable[yandex.cloud.logging.v1.export_service_pb2.ListExportOperationsResponse]]:
        """Lists operations for the specified export."""

    @abc.abstractmethod
    def ListAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.access.access_pb2.ListAccessBindingsResponse, collections.abc.Awaitable[yandex.cloud.access.access_pb2.ListAccessBindingsResponse]]:
        """Lists existing access bindings for the specified export."""

    @abc.abstractmethod
    def SetAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Sets access bindings for the specified export."""

    @abc.abstractmethod
    def UpdateAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates access bindings for the specified export."""

def add_ExportServiceServicer_to_server(servicer: ExportServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
