"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.access.access_pb2
import yandex.cloud.logging.v1.sink_pb2
import yandex.cloud.logging.v1.sink_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SinkServiceStub:
    """A set of methods for managing log sinks."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.GetSinkRequest,
        yandex.cloud.logging.v1.sink_pb2.Sink,
    ]
    """Returns the specified sink.

    To get the list of all available sinks, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.ListSinksRequest,
        yandex.cloud.logging.v1.sink_service_pb2.ListSinksResponse,
    ]
    """Retrieves the list of sinks in the specified folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.CreateSinkRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a sink in the specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.UpdateSinkRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified sink."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.DeleteSinkRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified sink."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.ListSinkOperationsRequest,
        yandex.cloud.logging.v1.sink_service_pb2.ListSinkOperationsResponse,
    ]
    """Lists operations for the specified sink."""

    ListAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        yandex.cloud.access.access_pb2.ListAccessBindingsResponse,
    ]
    """Lists existing access bindings for the specified sink."""

    SetAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Sets access bindings for the specified sink."""

    UpdateAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates access bindings for the specified sink."""

class SinkServiceAsyncStub:
    """A set of methods for managing log sinks."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.GetSinkRequest,
        yandex.cloud.logging.v1.sink_pb2.Sink,
    ]
    """Returns the specified sink.

    To get the list of all available sinks, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.ListSinksRequest,
        yandex.cloud.logging.v1.sink_service_pb2.ListSinksResponse,
    ]
    """Retrieves the list of sinks in the specified folder."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.CreateSinkRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a sink in the specified folder."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.UpdateSinkRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified sink."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.DeleteSinkRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified sink."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.logging.v1.sink_service_pb2.ListSinkOperationsRequest,
        yandex.cloud.logging.v1.sink_service_pb2.ListSinkOperationsResponse,
    ]
    """Lists operations for the specified sink."""

    ListAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        yandex.cloud.access.access_pb2.ListAccessBindingsResponse,
    ]
    """Lists existing access bindings for the specified sink."""

    SetAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Sets access bindings for the specified sink."""

    UpdateAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates access bindings for the specified sink."""

class SinkServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing log sinks."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.logging.v1.sink_service_pb2.GetSinkRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.logging.v1.sink_pb2.Sink, collections.abc.Awaitable[yandex.cloud.logging.v1.sink_pb2.Sink]]:
        """Returns the specified sink.

        To get the list of all available sinks, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.logging.v1.sink_service_pb2.ListSinksRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.logging.v1.sink_service_pb2.ListSinksResponse, collections.abc.Awaitable[yandex.cloud.logging.v1.sink_service_pb2.ListSinksResponse]]:
        """Retrieves the list of sinks in the specified folder."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.logging.v1.sink_service_pb2.CreateSinkRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a sink in the specified folder."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.logging.v1.sink_service_pb2.UpdateSinkRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified sink."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.logging.v1.sink_service_pb2.DeleteSinkRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified sink."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.logging.v1.sink_service_pb2.ListSinkOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.logging.v1.sink_service_pb2.ListSinkOperationsResponse, collections.abc.Awaitable[yandex.cloud.logging.v1.sink_service_pb2.ListSinkOperationsResponse]]:
        """Lists operations for the specified sink."""

    @abc.abstractmethod
    def ListAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.access.access_pb2.ListAccessBindingsResponse, collections.abc.Awaitable[yandex.cloud.access.access_pb2.ListAccessBindingsResponse]]:
        """Lists existing access bindings for the specified sink."""

    @abc.abstractmethod
    def SetAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Sets access bindings for the specified sink."""

    @abc.abstractmethod
    def UpdateAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates access bindings for the specified sink."""

def add_SinkServiceServicer_to_server(servicer: SinkServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
