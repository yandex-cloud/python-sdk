"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.dataproc.manager.v1.job_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class JobServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListActive: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsResponse,
    ]
    """Retrieves a list of jobs for Data Proc cluster."""

    UpdateStatus: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse,
    ]
    """Currently used to update Job status."""

    ListSupportActive: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListSupportJobsResponse,
    ]
    """Retrieves a list of support jobs for Data Proc cluster."""

    UpdateSupportStatus: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateSupportJobStatusRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse,
    ]
    """Currently used to update support job status."""

    SaveSupportLog: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.SaveSupportJobLogRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.SaveSupportJobLogResponse,
    ]
    """Save support job output."""

class JobServiceAsyncStub:
    ListActive: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsResponse,
    ]
    """Retrieves a list of jobs for Data Proc cluster."""

    UpdateStatus: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse,
    ]
    """Currently used to update Job status."""

    ListSupportActive: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.ListSupportJobsResponse,
    ]
    """Retrieves a list of support jobs for Data Proc cluster."""

    UpdateSupportStatus: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateSupportJobStatusRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse,
    ]
    """Currently used to update support job status."""

    SaveSupportLog: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.dataproc.manager.v1.job_service_pb2.SaveSupportJobLogRequest,
        yandex.cloud.dataproc.manager.v1.job_service_pb2.SaveSupportJobLogResponse,
    ]
    """Save support job output."""

class JobServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListActive(
        self,
        request: yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsResponse, collections.abc.Awaitable[yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsResponse]]:
        """Retrieves a list of jobs for Data Proc cluster."""

    @abc.abstractmethod
    def UpdateStatus(
        self,
        request: yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse, collections.abc.Awaitable[yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse]]:
        """Currently used to update Job status."""

    @abc.abstractmethod
    def ListSupportActive(
        self,
        request: yandex.cloud.dataproc.manager.v1.job_service_pb2.ListJobsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.dataproc.manager.v1.job_service_pb2.ListSupportJobsResponse, collections.abc.Awaitable[yandex.cloud.dataproc.manager.v1.job_service_pb2.ListSupportJobsResponse]]:
        """Retrieves a list of support jobs for Data Proc cluster."""

    @abc.abstractmethod
    def UpdateSupportStatus(
        self,
        request: yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateSupportJobStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse, collections.abc.Awaitable[yandex.cloud.dataproc.manager.v1.job_service_pb2.UpdateJobStatusResponse]]:
        """Currently used to update support job status."""

    @abc.abstractmethod
    def SaveSupportLog(
        self,
        request: yandex.cloud.dataproc.manager.v1.job_service_pb2.SaveSupportJobLogRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.dataproc.manager.v1.job_service_pb2.SaveSupportJobLogResponse, collections.abc.Awaitable[yandex.cloud.dataproc.manager.v1.job_service_pb2.SaveSupportJobLogResponse]]:
        """Save support job output."""

def add_JobServiceServicer_to_server(servicer: JobServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
