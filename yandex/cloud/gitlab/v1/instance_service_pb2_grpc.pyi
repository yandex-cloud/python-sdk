"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.gitlab.v1.instance_pb2
import yandex.cloud.gitlab.v1.instance_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class InstanceServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.GetInstanceRequest,
        yandex.cloud.gitlab.v1.instance_pb2.Instance,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.ListInstancesRequest,
        yandex.cloud.gitlab.v1.instance_service_pb2.ListInstancesResponse,
    ]

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.CreateInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.DeleteInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Start: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.StartInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Stop: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.StopInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

class InstanceServiceAsyncStub:
    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.GetInstanceRequest,
        yandex.cloud.gitlab.v1.instance_pb2.Instance,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.ListInstancesRequest,
        yandex.cloud.gitlab.v1.instance_service_pb2.ListInstancesResponse,
    ]

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.CreateInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.DeleteInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Start: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.StartInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Stop: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.gitlab.v1.instance_service_pb2.StopInstanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

class InstanceServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.gitlab.v1.instance_service_pb2.GetInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.gitlab.v1.instance_pb2.Instance, collections.abc.Awaitable[yandex.cloud.gitlab.v1.instance_pb2.Instance]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.gitlab.v1.instance_service_pb2.ListInstancesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.gitlab.v1.instance_service_pb2.ListInstancesResponse, collections.abc.Awaitable[yandex.cloud.gitlab.v1.instance_service_pb2.ListInstancesResponse]]: ...

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.gitlab.v1.instance_service_pb2.CreateInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.gitlab.v1.instance_service_pb2.DeleteInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Start(
        self,
        request: yandex.cloud.gitlab.v1.instance_service_pb2.StartInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Stop(
        self,
        request: yandex.cloud.gitlab.v1.instance_service_pb2.StopInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]: ...

def add_InstanceServiceServicer_to_server(servicer: InstanceServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
