"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.operation.operation_pb2
import yandex.cloud.video.v1.stream_pb2
import yandex.cloud.video.v1.stream_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class StreamServiceStub:
    """Stream management service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.GetStreamRequest,
        yandex.cloud.video.v1.stream_pb2.Stream,
    ]
    """Returns the specific stream."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.ListStreamsRequest,
        yandex.cloud.video.v1.stream_service_pb2.ListStreamsResponse,
    ]
    """List streams for channel."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.CreateStreamRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create stream."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.UpdateStreamRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update stream."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.DeleteStreamRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete stream."""

    PerformAction: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.PerformStreamActionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Perform an action on the episode."""

class StreamServiceAsyncStub:
    """Stream management service."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.GetStreamRequest,
        yandex.cloud.video.v1.stream_pb2.Stream,
    ]
    """Returns the specific stream."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.ListStreamsRequest,
        yandex.cloud.video.v1.stream_service_pb2.ListStreamsResponse,
    ]
    """List streams for channel."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.CreateStreamRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create stream."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.UpdateStreamRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update stream."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.DeleteStreamRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete stream."""

    PerformAction: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.stream_service_pb2.PerformStreamActionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Perform an action on the episode."""

class StreamServiceServicer(metaclass=abc.ABCMeta):
    """Stream management service."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.video.v1.stream_service_pb2.GetStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.stream_pb2.Stream, collections.abc.Awaitable[yandex.cloud.video.v1.stream_pb2.Stream]]:
        """Returns the specific stream."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.video.v1.stream_service_pb2.ListStreamsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.stream_service_pb2.ListStreamsResponse, collections.abc.Awaitable[yandex.cloud.video.v1.stream_service_pb2.ListStreamsResponse]]:
        """List streams for channel."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.video.v1.stream_service_pb2.CreateStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Create stream."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.video.v1.stream_service_pb2.UpdateStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Update stream."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.video.v1.stream_service_pb2.DeleteStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Delete stream."""

    @abc.abstractmethod
    def PerformAction(
        self,
        request: yandex.cloud.video.v1.stream_service_pb2.PerformStreamActionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Perform an action on the episode."""

def add_StreamServiceServicer_to_server(servicer: StreamServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
