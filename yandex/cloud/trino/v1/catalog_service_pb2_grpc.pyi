"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.operation.operation_pb2
import yandex.cloud.trino.v1.catalog_pb2
import yandex.cloud.trino.v1.catalog_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class CatalogServiceStub:
    """A set of methods for managing Trino Cluster Catalog resources."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.GetCatalogRequest,
        yandex.cloud.trino.v1.catalog_pb2.Catalog,
    ]
    """Returns the specified Trino Catalog resource."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.ListCatalogsRequest,
        yandex.cloud.trino.v1.catalog_service_pb2.ListCatalogsResponse,
    ]
    """Retrieves a list of Trino Catalog resources."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.CreateCatalogRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a new Trino Catalog."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.UpdateCatalogRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified Trino Catalog."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.DeleteCatalogRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified Trino Catalog."""

class CatalogServiceAsyncStub:
    """A set of methods for managing Trino Cluster Catalog resources."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.GetCatalogRequest,
        yandex.cloud.trino.v1.catalog_pb2.Catalog,
    ]
    """Returns the specified Trino Catalog resource."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.ListCatalogsRequest,
        yandex.cloud.trino.v1.catalog_service_pb2.ListCatalogsResponse,
    ]
    """Retrieves a list of Trino Catalog resources."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.CreateCatalogRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a new Trino Catalog."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.UpdateCatalogRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified Trino Catalog."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.trino.v1.catalog_service_pb2.DeleteCatalogRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified Trino Catalog."""

class CatalogServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing Trino Cluster Catalog resources."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.trino.v1.catalog_service_pb2.GetCatalogRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.trino.v1.catalog_pb2.Catalog, collections.abc.Awaitable[yandex.cloud.trino.v1.catalog_pb2.Catalog]]:
        """Returns the specified Trino Catalog resource."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.trino.v1.catalog_service_pb2.ListCatalogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.trino.v1.catalog_service_pb2.ListCatalogsResponse, collections.abc.Awaitable[yandex.cloud.trino.v1.catalog_service_pb2.ListCatalogsResponse]]:
        """Retrieves a list of Trino Catalog resources."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.trino.v1.catalog_service_pb2.CreateCatalogRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a new Trino Catalog."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.trino.v1.catalog_service_pb2.UpdateCatalogRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified Trino Catalog."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.trino.v1.catalog_service_pb2.DeleteCatalogRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified Trino Catalog."""

def add_CatalogServiceServicer_to_server(servicer: CatalogServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
