"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.k8s.v1.node_group_pb2
import yandex.cloud.k8s.v1.node_group_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class NodeGroupServiceStub:
    """A set of methods for managing node groups."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.GetNodeGroupRequest,
        yandex.cloud.k8s.v1.node_group_pb2.NodeGroup,
    ]
    """Returns the specified node group.

    To get the list of available node group, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupsRequest,
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupsResponse,
    ]
    """Retrieves the list of node group in the specified Kubernetes cluster."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.CreateNodeGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a node group in the specified Kubernetes cluster."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.UpdateNodeGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified node group."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.DeleteNodeGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified node group."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupOperationsRequest,
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupOperationsResponse,
    ]
    """Lists operations for the specified node group."""

    ListNodes: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupNodesRequest,
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupNodesResponse,
    ]
    """Retrieves the list of nodes in the specified Kubernetes cluster."""

class NodeGroupServiceAsyncStub:
    """A set of methods for managing node groups."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.GetNodeGroupRequest,
        yandex.cloud.k8s.v1.node_group_pb2.NodeGroup,
    ]
    """Returns the specified node group.

    To get the list of available node group, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupsRequest,
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupsResponse,
    ]
    """Retrieves the list of node group in the specified Kubernetes cluster."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.CreateNodeGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a node group in the specified Kubernetes cluster."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.UpdateNodeGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified node group."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.DeleteNodeGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified node group."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupOperationsRequest,
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupOperationsResponse,
    ]
    """Lists operations for the specified node group."""

    ListNodes: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupNodesRequest,
        yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupNodesResponse,
    ]
    """Retrieves the list of nodes in the specified Kubernetes cluster."""

class NodeGroupServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing node groups."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.k8s.v1.node_group_service_pb2.GetNodeGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.k8s.v1.node_group_pb2.NodeGroup, collections.abc.Awaitable[yandex.cloud.k8s.v1.node_group_pb2.NodeGroup]]:
        """Returns the specified node group.

        To get the list of available node group, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupsResponse, collections.abc.Awaitable[yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupsResponse]]:
        """Retrieves the list of node group in the specified Kubernetes cluster."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.k8s.v1.node_group_service_pb2.CreateNodeGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a node group in the specified Kubernetes cluster."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.k8s.v1.node_group_service_pb2.UpdateNodeGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified node group."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.k8s.v1.node_group_service_pb2.DeleteNodeGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified node group."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupOperationsResponse, collections.abc.Awaitable[yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupOperationsResponse]]:
        """Lists operations for the specified node group."""

    @abc.abstractmethod
    def ListNodes(
        self,
        request: yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupNodesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupNodesResponse, collections.abc.Awaitable[yandex.cloud.k8s.v1.node_group_service_pb2.ListNodeGroupNodesResponse]]:
        """Retrieves the list of nodes in the specified Kubernetes cluster."""

def add_NodeGroupServiceServicer_to_server(servicer: NodeGroupServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
