"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Assistants(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSISTANT_RESULTS_FIELD_NUMBER: builtins.int
    @property
    def assistant_results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AssistantResult]:
        """List of assistants results"""

    def __init__(
        self,
        *,
        assistant_results: collections.abc.Iterable[global___AssistantResult] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["assistant_results", b"assistant_results"]) -> None: ...

global___Assistants = Assistants

@typing.final
class AssistantResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSISTANT_ID_FIELD_NUMBER: builtins.int
    RESULTS_FIELD_NUMBER: builtins.int
    assistant_id: builtins.str
    """Assistant id"""
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AssistantFieldResult]:
        """Per-field assistant results"""

    def __init__(
        self,
        *,
        assistant_id: builtins.str = ...,
        results: collections.abc.Iterable[global___AssistantFieldResult] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["assistant_id", b"assistant_id", "results", b"results"]) -> None: ...

global___AssistantResult = AssistantResult

@typing.final
class AssistantFieldResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_ID_FIELD_NUMBER: builtins.int
    STRING_RESULT_FIELD_NUMBER: builtins.int
    INT_RESULT_FIELD_NUMBER: builtins.int
    FLOAT_RESULT_FIELD_NUMBER: builtins.int
    field_id: builtins.str
    """Assistant result field id"""
    string_result: builtins.str
    """Result as a string"""
    int_result: builtins.int
    """Result as an integer"""
    float_result: builtins.float
    """Result as a floating-point number"""
    def __init__(
        self,
        *,
        field_id: builtins.str = ...,
        string_result: builtins.str = ...,
        int_result: builtins.int = ...,
        float_result: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["field_type", b"field_type", "float_result", b"float_result", "int_result", b"int_result", "string_result", b"string_result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["field_id", b"field_id", "field_type", b"field_type", "float_result", b"float_result", "int_result", b"int_result", "string_result", b"string_result"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["field_type", b"field_type"]) -> typing.Literal["string_result", "int_result", "float_result"] | None: ...

global___AssistantFieldResult = AssistantFieldResult
