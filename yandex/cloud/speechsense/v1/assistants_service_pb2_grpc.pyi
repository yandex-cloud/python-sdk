"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.speechsense.v1.assistants_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AssistantsServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListAssistantsRequest,
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListAssistantsResponse,
    ]
    """Rpc for listing assistants in a project"""

    ListModels: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListModelsRequest,
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListModelsResponse,
    ]
    """Rpc for listing available assistant models"""

class AssistantsServiceAsyncStub:
    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListAssistantsRequest,
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListAssistantsResponse,
    ]
    """Rpc for listing assistants in a project"""

    ListModels: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListModelsRequest,
        yandex.cloud.speechsense.v1.assistants_service_pb2.ListModelsResponse,
    ]
    """Rpc for listing available assistant models"""

class AssistantsServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.speechsense.v1.assistants_service_pb2.ListAssistantsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.speechsense.v1.assistants_service_pb2.ListAssistantsResponse, collections.abc.Awaitable[yandex.cloud.speechsense.v1.assistants_service_pb2.ListAssistantsResponse]]:
        """Rpc for listing assistants in a project"""

    @abc.abstractmethod
    def ListModels(
        self,
        request: yandex.cloud.speechsense.v1.assistants_service_pb2.ListModelsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.speechsense.v1.assistants_service_pb2.ListModelsResponse, collections.abc.Awaitable[yandex.cloud.speechsense.v1.assistants_service_pb2.ListModelsResponse]]:
        """Rpc for listing available assistant models"""

def add_AssistantsServiceServicer_to_server(servicer: AssistantsServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
