"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.billing.v1.customer_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class CustomerServiceStub:
    """A set of methods for managing Customer resources."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.ListCustomersRequest,
        yandex.cloud.billing.v1.customer_service_pb2.ListCustomersResponse,
    ]
    """Retrieves the list of customers associated with the specified reseller."""

    Invite: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.InviteCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Invites customer to the specified reseller."""

    CreateResellerServed: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.CreateResellerServedCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates new reseller-served customer."""

    Activate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.ActivateCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Activates specified customer. After customer is activated, he can use resources associated with his billing account."""

    Suspend: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.SuspendCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Suspend specified customer. After customer is suspended, he can't use resources associated with his billing account."""

class CustomerServiceAsyncStub:
    """A set of methods for managing Customer resources."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.ListCustomersRequest,
        yandex.cloud.billing.v1.customer_service_pb2.ListCustomersResponse,
    ]
    """Retrieves the list of customers associated with the specified reseller."""

    Invite: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.InviteCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Invites customer to the specified reseller."""

    CreateResellerServed: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.CreateResellerServedCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates new reseller-served customer."""

    Activate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.ActivateCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Activates specified customer. After customer is activated, he can use resources associated with his billing account."""

    Suspend: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.billing.v1.customer_service_pb2.SuspendCustomerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Suspend specified customer. After customer is suspended, he can't use resources associated with his billing account."""

class CustomerServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing Customer resources."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.billing.v1.customer_service_pb2.ListCustomersRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.billing.v1.customer_service_pb2.ListCustomersResponse, collections.abc.Awaitable[yandex.cloud.billing.v1.customer_service_pb2.ListCustomersResponse]]:
        """Retrieves the list of customers associated with the specified reseller."""

    @abc.abstractmethod
    def Invite(
        self,
        request: yandex.cloud.billing.v1.customer_service_pb2.InviteCustomerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Invites customer to the specified reseller."""

    @abc.abstractmethod
    def CreateResellerServed(
        self,
        request: yandex.cloud.billing.v1.customer_service_pb2.CreateResellerServedCustomerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates new reseller-served customer."""

    @abc.abstractmethod
    def Activate(
        self,
        request: yandex.cloud.billing.v1.customer_service_pb2.ActivateCustomerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Activates specified customer. After customer is activated, he can use resources associated with his billing account."""

    @abc.abstractmethod
    def Suspend(
        self,
        request: yandex.cloud.billing.v1.customer_service_pb2.SuspendCustomerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Suspend specified customer. After customer is suspended, he can't use resources associated with his billing account."""

def add_CustomerServiceServicer_to_server(servicer: CustomerServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
