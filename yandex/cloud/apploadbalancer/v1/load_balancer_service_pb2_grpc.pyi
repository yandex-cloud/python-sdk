"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.apploadbalancer.v1.load_balancer_pb2
import yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class LoadBalancerServiceStub:
    """A set of methods for managing application load balancers."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetLoadBalancerRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_pb2.LoadBalancer,
    ]
    """Returns the specified application load balancer.

    To get the list of all available application load balancers, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancersRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancersResponse,
    ]
    """Lists application load balancers in the specified folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.CreateLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates an application load balancer in the specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified application load balancer."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.DeleteLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified application load balancer."""

    Start: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.StartLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts the specified application load balancer."""

    Stop: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.StopLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Stops the specified application load balancer."""

    AddListener: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.AddListenerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """AddListener/UpdateListener technically do the same, but have different semantics.

    Adds a listener to the specified application load balancer.
    """

    RemoveListener: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.RemoveListenerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified listener."""

    UpdateListener: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateListenerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified listener of the specified application load balancer."""

    AddSniMatch: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.AddSniMatchRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Adds a SNI handler to the specified listener.

    This request does not allow to add [TlsListener.default_handler]. Make an [UpdateListener] request instead.
    """

    UpdateSniMatch: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateSniMatchRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified SNI handler of the specified listener.

    This request does not allow to update [TlsListener.default_handler]. Make an [UpdateListener] request instead.
    """

    RemoveSniMatch: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.RemoveSniMatchRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified SNI handler.

    This request does not allow to delete [TlsListener.default_handler].
    """

    GetTargetStates: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetTargetStatesRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetTargetStatesResponse,
    ]
    """Returns the statuses of all targets of the specified backend group in all their availability zones."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancerOperationsRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancerOperationsResponse,
    ]
    """Lists operations for the specified application load balancer."""

class LoadBalancerServiceAsyncStub:
    """A set of methods for managing application load balancers."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetLoadBalancerRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_pb2.LoadBalancer,
    ]
    """Returns the specified application load balancer.

    To get the list of all available application load balancers, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancersRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancersResponse,
    ]
    """Lists application load balancers in the specified folder."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.CreateLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates an application load balancer in the specified folder."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified application load balancer."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.DeleteLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified application load balancer."""

    Start: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.StartLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts the specified application load balancer."""

    Stop: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.StopLoadBalancerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Stops the specified application load balancer."""

    AddListener: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.AddListenerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """AddListener/UpdateListener technically do the same, but have different semantics.

    Adds a listener to the specified application load balancer.
    """

    RemoveListener: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.RemoveListenerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified listener."""

    UpdateListener: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateListenerRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified listener of the specified application load balancer."""

    AddSniMatch: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.AddSniMatchRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Adds a SNI handler to the specified listener.

    This request does not allow to add [TlsListener.default_handler]. Make an [UpdateListener] request instead.
    """

    UpdateSniMatch: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateSniMatchRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified SNI handler of the specified listener.

    This request does not allow to update [TlsListener.default_handler]. Make an [UpdateListener] request instead.
    """

    RemoveSniMatch: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.RemoveSniMatchRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified SNI handler.

    This request does not allow to delete [TlsListener.default_handler].
    """

    GetTargetStates: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetTargetStatesRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetTargetStatesResponse,
    ]
    """Returns the statuses of all targets of the specified backend group in all their availability zones."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancerOperationsRequest,
        yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancerOperationsResponse,
    ]
    """Lists operations for the specified application load balancer."""

class LoadBalancerServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing application load balancers."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetLoadBalancerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.apploadbalancer.v1.load_balancer_pb2.LoadBalancer, collections.abc.Awaitable[yandex.cloud.apploadbalancer.v1.load_balancer_pb2.LoadBalancer]]:
        """Returns the specified application load balancer.

        To get the list of all available application load balancers, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancersRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancersResponse, collections.abc.Awaitable[yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancersResponse]]:
        """Lists application load balancers in the specified folder."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.CreateLoadBalancerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates an application load balancer in the specified folder."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateLoadBalancerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified application load balancer."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.DeleteLoadBalancerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified application load balancer."""

    @abc.abstractmethod
    def Start(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.StartLoadBalancerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Starts the specified application load balancer."""

    @abc.abstractmethod
    def Stop(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.StopLoadBalancerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Stops the specified application load balancer."""

    @abc.abstractmethod
    def AddListener(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.AddListenerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """AddListener/UpdateListener technically do the same, but have different semantics.

        Adds a listener to the specified application load balancer.
        """

    @abc.abstractmethod
    def RemoveListener(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.RemoveListenerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified listener."""

    @abc.abstractmethod
    def UpdateListener(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateListenerRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified listener of the specified application load balancer."""

    @abc.abstractmethod
    def AddSniMatch(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.AddSniMatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Adds a SNI handler to the specified listener.

        This request does not allow to add [TlsListener.default_handler]. Make an [UpdateListener] request instead.
        """

    @abc.abstractmethod
    def UpdateSniMatch(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.UpdateSniMatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified SNI handler of the specified listener.

        This request does not allow to update [TlsListener.default_handler]. Make an [UpdateListener] request instead.
        """

    @abc.abstractmethod
    def RemoveSniMatch(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.RemoveSniMatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified SNI handler.

        This request does not allow to delete [TlsListener.default_handler].
        """

    @abc.abstractmethod
    def GetTargetStates(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetTargetStatesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetTargetStatesResponse, collections.abc.Awaitable[yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.GetTargetStatesResponse]]:
        """Returns the statuses of all targets of the specified backend group in all their availability zones."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancerOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancerOperationsResponse, collections.abc.Awaitable[yandex.cloud.apploadbalancer.v1.load_balancer_service_pb2.ListLoadBalancerOperationsResponse]]:
        """Lists operations for the specified application load balancer."""

def add_LoadBalancerServiceServicer_to_server(servicer: LoadBalancerServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
