"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.apploadbalancer.v1.target_group_pb2
import yandex.cloud.apploadbalancer.v1.target_group_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TargetGroupServiceStub:
    """A set of methods for managing target groups."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.GetTargetGroupRequest,
        yandex.cloud.apploadbalancer.v1.target_group_pb2.TargetGroup,
    ]
    """Returns the specified target group.

    To get the list of all available target groups, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupsRequest,
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupsResponse,
    ]
    """Lists target groups in the specified folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.CreateTargetGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a target group in the specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.UpdateTargetGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified target group."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.DeleteTargetGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified target group."""

    AddTargets: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.AddTargetsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Adds targets to the specified target group."""

    RemoveTargets: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.RemoveTargetsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Removes targets from the specified target group."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupOperationsRequest,
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupOperationsResponse,
    ]
    """Lists operations for the specified target group."""

class TargetGroupServiceAsyncStub:
    """A set of methods for managing target groups."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.GetTargetGroupRequest,
        yandex.cloud.apploadbalancer.v1.target_group_pb2.TargetGroup,
    ]
    """Returns the specified target group.

    To get the list of all available target groups, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupsRequest,
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupsResponse,
    ]
    """Lists target groups in the specified folder."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.CreateTargetGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a target group in the specified folder."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.UpdateTargetGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified target group."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.DeleteTargetGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified target group."""

    AddTargets: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.AddTargetsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Adds targets to the specified target group."""

    RemoveTargets: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.RemoveTargetsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Removes targets from the specified target group."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupOperationsRequest,
        yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupOperationsResponse,
    ]
    """Lists operations for the specified target group."""

class TargetGroupServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing target groups."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.GetTargetGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.apploadbalancer.v1.target_group_pb2.TargetGroup, collections.abc.Awaitable[yandex.cloud.apploadbalancer.v1.target_group_pb2.TargetGroup]]:
        """Returns the specified target group.

        To get the list of all available target groups, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupsResponse, collections.abc.Awaitable[yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupsResponse]]:
        """Lists target groups in the specified folder."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.CreateTargetGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a target group in the specified folder."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.UpdateTargetGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified target group."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.DeleteTargetGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified target group."""

    @abc.abstractmethod
    def AddTargets(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.AddTargetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Adds targets to the specified target group."""

    @abc.abstractmethod
    def RemoveTargets(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.RemoveTargetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Removes targets from the specified target group."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupOperationsResponse, collections.abc.Awaitable[yandex.cloud.apploadbalancer.v1.target_group_service_pb2.ListTargetGroupOperationsResponse]]:
        """Lists operations for the specified target group."""

def add_TargetGroupServiceServicer_to_server(servicer: TargetGroupServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
