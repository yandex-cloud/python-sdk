"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.empty_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing
import yandex.cloud.connectionmanager.v1.common_pb2

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class KafkaSaslSecurity(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Mechanism:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _MechanismEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[KafkaSaslSecurity._Mechanism.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        MECHANISM_UNSPECIFIED: KafkaSaslSecurity._Mechanism.ValueType  # 0
        PLAIN: KafkaSaslSecurity._Mechanism.ValueType  # 1
        SCRAM_SHA256: KafkaSaslSecurity._Mechanism.ValueType  # 2
        SCRAM_SHA512: KafkaSaslSecurity._Mechanism.ValueType  # 3

    class Mechanism(_Mechanism, metaclass=_MechanismEnumTypeWrapper): ...
    MECHANISM_UNSPECIFIED: KafkaSaslSecurity.Mechanism.ValueType  # 0
    PLAIN: KafkaSaslSecurity.Mechanism.ValueType  # 1
    SCRAM_SHA256: KafkaSaslSecurity.Mechanism.ValueType  # 2
    SCRAM_SHA512: KafkaSaslSecurity.Mechanism.ValueType  # 3

    USER_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    SUPPORTED_MECHANISMS_FIELD_NUMBER: builtins.int
    user: builtins.str
    @property
    def password(self) -> yandex.cloud.connectionmanager.v1.common_pb2.Password: ...
    @property
    def supported_mechanisms(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___KafkaSaslSecurity.Mechanism.ValueType]: ...
    def __init__(
        self,
        *,
        user: builtins.str = ...,
        password: yandex.cloud.connectionmanager.v1.common_pb2.Password | None = ...,
        supported_mechanisms: collections.abc.Iterable[global___KafkaSaslSecurity.Mechanism.ValueType] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["password", b"password"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["password", b"password", "supported_mechanisms", b"supported_mechanisms", "user", b"user"]) -> None: ...

global___KafkaSaslSecurity = KafkaSaslSecurity

@typing.final
class KafkaAuth(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SASL_FIELD_NUMBER: builtins.int
    DISABLED_FIELD_NUMBER: builtins.int
    @property
    def sasl(self) -> global___KafkaSaslSecurity: ...
    @property
    def disabled(self) -> google.protobuf.empty_pb2.Empty: ...
    def __init__(
        self,
        *,
        sasl: global___KafkaSaslSecurity | None = ...,
        disabled: google.protobuf.empty_pb2.Empty | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["disabled", b"disabled", "sasl", b"sasl", "security", b"security"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["disabled", b"disabled", "sasl", b"sasl", "security", b"security"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["security", b"security"]) -> typing.Literal["sasl", "disabled"] | None: ...

global___KafkaAuth = KafkaAuth

@typing.final
class KafkaCluster(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Host(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _Health:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _HealthEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[KafkaCluster.Host._Health.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            HEALTH_UNSPECIFIED: KafkaCluster.Host._Health.ValueType  # 0
            """Host is in unknown state (we have no data)"""
            ALIVE: KafkaCluster.Host._Health.ValueType  # 1
            """Host is alive and well (all services are alive)"""
            DEAD: KafkaCluster.Host._Health.ValueType  # 2
            """Host is inoperable (it cannot perform any of its essential functions)"""
            DEGRADED: KafkaCluster.Host._Health.ValueType  # 3
            """Host is partially alive (it can perform some of its essential functions)"""

        class Health(_Health, metaclass=_HealthEnumTypeWrapper): ...
        HEALTH_UNSPECIFIED: KafkaCluster.Host.Health.ValueType  # 0
        """Host is in unknown state (we have no data)"""
        ALIVE: KafkaCluster.Host.Health.ValueType  # 1
        """Host is alive and well (all services are alive)"""
        DEAD: KafkaCluster.Host.Health.ValueType  # 2
        """Host is inoperable (it cannot perform any of its essential functions)"""
        DEGRADED: KafkaCluster.Host.Health.ValueType  # 3
        """Host is partially alive (it can perform some of its essential functions)"""

        HOST_FIELD_NUMBER: builtins.int
        PORT_FIELD_NUMBER: builtins.int
        HEALTH_FIELD_NUMBER: builtins.int
        host: builtins.str
        port: builtins.int
        health: global___KafkaCluster.Host.Health.ValueType
        def __init__(
            self,
            *,
            host: builtins.str = ...,
            port: builtins.int = ...,
            health: global___KafkaCluster.Host.Health.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["health", b"health", "host", b"host", "port", b"port"]) -> None: ...

    HOSTS_FIELD_NUMBER: builtins.int
    TLS_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def hosts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KafkaCluster.Host]: ...
    @property
    def tls_params(self) -> yandex.cloud.connectionmanager.v1.common_pb2.TLSParams: ...
    def __init__(
        self,
        *,
        hosts: collections.abc.Iterable[global___KafkaCluster.Host] | None = ...,
        tls_params: yandex.cloud.connectionmanager.v1.common_pb2.TLSParams | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["tls_params", b"tls_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["hosts", b"hosts", "tls_params", b"tls_params"]) -> None: ...

global___KafkaCluster = KafkaCluster

@typing.final
class KafkaConnection(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLUSTER_FIELD_NUMBER: builtins.int
    MANAGED_CLUSTER_ID_FIELD_NUMBER: builtins.int
    AUTH_FIELD_NUMBER: builtins.int
    managed_cluster_id: builtins.str
    """When creating/updating Connection, the field "managed_cluster_id" is
    mutually exclusive with "cluster".
    """
    @property
    def cluster(self) -> global___KafkaCluster:
        """When creating/updating Connection, the field "cluster" is mutually
        exclusive with "managed_cluster_id".
        """

    @property
    def auth(self) -> global___KafkaAuth: ...
    def __init__(
        self,
        *,
        cluster: global___KafkaCluster | None = ...,
        managed_cluster_id: builtins.str = ...,
        auth: global___KafkaAuth | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["auth", b"auth", "cluster", b"cluster"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["auth", b"auth", "cluster", b"cluster", "managed_cluster_id", b"managed_cluster_id"]) -> None: ...

global___KafkaConnection = KafkaConnection
