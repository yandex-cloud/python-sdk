"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing
import yandex.cloud.connectionmanager.v1.common_pb2

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class MySQLAuth(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    USER_PASSWORD_FIELD_NUMBER: builtins.int
    @property
    def user_password(self) -> yandex.cloud.connectionmanager.v1.common_pb2.UserPasswordAuth: ...
    def __init__(
        self,
        *,
        user_password: yandex.cloud.connectionmanager.v1.common_pb2.UserPasswordAuth | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["security", b"security", "user_password", b"user_password"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["security", b"security", "user_password", b"user_password"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["security", b"security"]) -> typing.Literal["user_password"] | None: ...

global___MySQLAuth = MySQLAuth

@typing.final
class MySQLCluster(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Host(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _Role:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _RoleEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[MySQLCluster.Host._Role.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            ROLE_UNSPECIFIED: MySQLCluster.Host._Role.ValueType  # 0
            MASTER: MySQLCluster.Host._Role.ValueType  # 1
            REPLICA: MySQLCluster.Host._Role.ValueType  # 2

        class Role(_Role, metaclass=_RoleEnumTypeWrapper): ...
        ROLE_UNSPECIFIED: MySQLCluster.Host.Role.ValueType  # 0
        MASTER: MySQLCluster.Host.Role.ValueType  # 1
        REPLICA: MySQLCluster.Host.Role.ValueType  # 2

        class _Health:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _HealthEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[MySQLCluster.Host._Health.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            HEALTH_UNSPECIFIED: MySQLCluster.Host._Health.ValueType  # 0
            ALIVE: MySQLCluster.Host._Health.ValueType  # 1
            DEAD: MySQLCluster.Host._Health.ValueType  # 2
            DEGRADED: MySQLCluster.Host._Health.ValueType  # 3
            READONLY: MySQLCluster.Host._Health.ValueType  # 4

        class Health(_Health, metaclass=_HealthEnumTypeWrapper): ...
        HEALTH_UNSPECIFIED: MySQLCluster.Host.Health.ValueType  # 0
        ALIVE: MySQLCluster.Host.Health.ValueType  # 1
        DEAD: MySQLCluster.Host.Health.ValueType  # 2
        DEGRADED: MySQLCluster.Host.Health.ValueType  # 3
        READONLY: MySQLCluster.Host.Health.ValueType  # 4

        HOST_FIELD_NUMBER: builtins.int
        PORT_FIELD_NUMBER: builtins.int
        ROLE_FIELD_NUMBER: builtins.int
        HEALTH_FIELD_NUMBER: builtins.int
        host: builtins.str
        port: builtins.int
        role: global___MySQLCluster.Host.Role.ValueType
        health: global___MySQLCluster.Host.Health.ValueType
        def __init__(
            self,
            *,
            host: builtins.str = ...,
            port: builtins.int = ...,
            role: global___MySQLCluster.Host.Role.ValueType = ...,
            health: global___MySQLCluster.Host.Health.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["health", b"health", "host", b"host", "port", b"port", "role", b"role"]) -> None: ...

    HOSTS_FIELD_NUMBER: builtins.int
    TLS_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def hosts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MySQLCluster.Host]: ...
    @property
    def tls_params(self) -> yandex.cloud.connectionmanager.v1.common_pb2.TLSParams: ...
    def __init__(
        self,
        *,
        hosts: collections.abc.Iterable[global___MySQLCluster.Host] | None = ...,
        tls_params: yandex.cloud.connectionmanager.v1.common_pb2.TLSParams | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["tls_params", b"tls_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["hosts", b"hosts", "tls_params", b"tls_params"]) -> None: ...

global___MySQLCluster = MySQLCluster

@typing.final
class MySQLConnection(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLUSTER_FIELD_NUMBER: builtins.int
    MANAGED_CLUSTER_ID_FIELD_NUMBER: builtins.int
    AUTH_FIELD_NUMBER: builtins.int
    DATABASES_FIELD_NUMBER: builtins.int
    managed_cluster_id: builtins.str
    """When creating/updating Connection, the field "managed_cluster_id" is
    mutually exclusive with "cluster".
    """
    @property
    def cluster(self) -> global___MySQLCluster:
        """When creating/updating Connection, the field "cluster" is mutually
        exclusive with "managed_cluster_id".
        """

    @property
    def auth(self) -> global___MySQLAuth: ...
    @property
    def databases(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        cluster: global___MySQLCluster | None = ...,
        managed_cluster_id: builtins.str = ...,
        auth: global___MySQLAuth | None = ...,
        databases: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["auth", b"auth", "cluster", b"cluster"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["auth", b"auth", "cluster", b"cluster", "databases", b"databases", "managed_cluster_id", b"managed_cluster_id"]) -> None: ...

global___MySQLConnection = MySQLConnection
