"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AsymmetricSignatureCryptoServiceStub:
    """Data plane for KMS symmetric cryptography operations

    Set of methods that perform asymmetric signature.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Sign: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignRequest,
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignResponse,
    ]
    """Signs data specified KMS key."""

    SignHash: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignHashRequest,
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignHashResponse,
    ]
    """Signs hash value specified KMS key."""

    GetPublicKey: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricGetPublicKeyRequest,
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricGetPublicKeyResponse,
    ]
    """Gets value of public key."""

class AsymmetricSignatureCryptoServiceAsyncStub:
    """Data plane for KMS symmetric cryptography operations

    Set of methods that perform asymmetric signature.
    """

    Sign: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignRequest,
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignResponse,
    ]
    """Signs data specified KMS key."""

    SignHash: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignHashRequest,
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignHashResponse,
    ]
    """Signs hash value specified KMS key."""

    GetPublicKey: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricGetPublicKeyRequest,
        yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricGetPublicKeyResponse,
    ]
    """Gets value of public key."""

class AsymmetricSignatureCryptoServiceServicer(metaclass=abc.ABCMeta):
    """Data plane for KMS symmetric cryptography operations

    Set of methods that perform asymmetric signature.
    """

    @abc.abstractmethod
    def Sign(
        self,
        request: yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignResponse, collections.abc.Awaitable[yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignResponse]]:
        """Signs data specified KMS key."""

    @abc.abstractmethod
    def SignHash(
        self,
        request: yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignHashRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignHashResponse, collections.abc.Awaitable[yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricSignHashResponse]]:
        """Signs hash value specified KMS key."""

    @abc.abstractmethod
    def GetPublicKey(
        self,
        request: yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricGetPublicKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricGetPublicKeyResponse, collections.abc.Awaitable[yandex.cloud.kms.v1.asymmetricsignature.asymmetric_signature_crypto_service_pb2.AsymmetricGetPublicKeyResponse]]:
        """Gets value of public key."""

def add_AsymmetricSignatureCryptoServiceServicer_to_server(servicer: AsymmetricSignatureCryptoServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
