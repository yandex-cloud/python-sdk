"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.mdb.clickhouse.v1.cluster_extension_pb2
import yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ClusterExtensionServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.GetClusterExtensionRequest,
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_pb2.ClusterExtension,
    ]

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.ListClusterExtensionsRequest,
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.ListClusterExtensionsResponse,
    ]

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.CreateClusterExtensionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.DeleteClusterExtensionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.UpdateClusterExtensionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    SetExtensions: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.SetClusterExtensionsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Set the list of cluster extensions. Not specified extensions will be deleted."""

class ClusterExtensionServiceAsyncStub:
    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.GetClusterExtensionRequest,
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_pb2.ClusterExtension,
    ]

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.ListClusterExtensionsRequest,
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.ListClusterExtensionsResponse,
    ]

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.CreateClusterExtensionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.DeleteClusterExtensionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.UpdateClusterExtensionRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]

    SetExtensions: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.SetClusterExtensionsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Set the list of cluster extensions. Not specified extensions will be deleted."""

class ClusterExtensionServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.GetClusterExtensionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.clickhouse.v1.cluster_extension_pb2.ClusterExtension, collections.abc.Awaitable[yandex.cloud.mdb.clickhouse.v1.cluster_extension_pb2.ClusterExtension]]: ...

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.ListClusterExtensionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.ListClusterExtensionsResponse, collections.abc.Awaitable[yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.ListClusterExtensionsResponse]]: ...

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.CreateClusterExtensionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.DeleteClusterExtensionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.UpdateClusterExtensionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def SetExtensions(
        self,
        request: yandex.cloud.mdb.clickhouse.v1.cluster_extension_service_pb2.SetClusterExtensionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Set the list of cluster extensions. Not specified extensions will be deleted."""

def add_ClusterExtensionServiceServicer_to_server(servicer: ClusterExtensionServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
