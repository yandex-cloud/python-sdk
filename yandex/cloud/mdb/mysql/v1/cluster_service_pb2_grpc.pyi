"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.mdb.mysql.v1.cluster_pb2
import yandex.cloud.mdb.mysql.v1.cluster_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ClusterServiceStub:
    """A set of methods for managing MySQL clusters."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.GetClusterRequest,
        yandex.cloud.mdb.mysql.v1.cluster_pb2.Cluster,
    ]
    """Retrieves information about a cluster."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClustersRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClustersResponse,
    ]
    """Retrieves the list of clusters in a folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.CreateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a cluster in a folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.UpdateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates a cluster."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.DeleteClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes a cluster."""

    Start: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StartClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts a cluster."""

    Stop: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StopClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Stops a cluster."""

    Move: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.MoveClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Moves a cluster to a folder."""

    Backup: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.BackupClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a backup for a cluster.

    To get information about a backup, make a [BackupService.Get] request.
    """

    Restore: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.RestoreClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Restores a backup to a new cluster.

    See [the documentation](/docs/managed-mysql/concepts/backup) for details.
    """

    RescheduleMaintenance: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.RescheduleMaintenanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Reschedules planned maintenance operation."""

    StartFailover: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StartClusterFailoverRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts a manual failover for a cluster."""

    ListLogs: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterLogsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterLogsResponse,
    ]
    """Retrieves logs for a cluster.

    Alternatively, logs can be streamed using [StreamLogs].
    """

    StreamLogs: grpc.UnaryStreamMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StreamClusterLogsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StreamLogRecord,
    ]
    """Retrieves a log stream for a cluster.

    This method is similar to [ListLogs], but uses server-side streaming, which allows for the `tail -f` command semantics.
    """

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterOperationsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterOperationsResponse,
    ]
    """Retrieves a list of operations for a cluster."""

    ListBackups: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterBackupsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterBackupsResponse,
    ]
    """Retrieves a list of backups for a cluster.

    To list all backups in a folder, make a [BackupService.List] request.
    """

    ListHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterHostsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterHostsResponse,
    ]
    """Retrieves a list of hosts for a cluster."""

    AddHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.AddClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Adds new hosts in a cluster."""

    UpdateHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.UpdateClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified hosts."""

    DeleteHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.DeleteClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified hosts for a cluster."""

class ClusterServiceAsyncStub:
    """A set of methods for managing MySQL clusters."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.GetClusterRequest,
        yandex.cloud.mdb.mysql.v1.cluster_pb2.Cluster,
    ]
    """Retrieves information about a cluster."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClustersRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClustersResponse,
    ]
    """Retrieves the list of clusters in a folder."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.CreateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a cluster in a folder."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.UpdateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates a cluster."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.DeleteClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes a cluster."""

    Start: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StartClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts a cluster."""

    Stop: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StopClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Stops a cluster."""

    Move: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.MoveClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Moves a cluster to a folder."""

    Backup: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.BackupClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a backup for a cluster.

    To get information about a backup, make a [BackupService.Get] request.
    """

    Restore: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.RestoreClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Restores a backup to a new cluster.

    See [the documentation](/docs/managed-mysql/concepts/backup) for details.
    """

    RescheduleMaintenance: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.RescheduleMaintenanceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Reschedules planned maintenance operation."""

    StartFailover: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StartClusterFailoverRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts a manual failover for a cluster."""

    ListLogs: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterLogsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterLogsResponse,
    ]
    """Retrieves logs for a cluster.

    Alternatively, logs can be streamed using [StreamLogs].
    """

    StreamLogs: grpc.aio.UnaryStreamMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StreamClusterLogsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StreamLogRecord,
    ]
    """Retrieves a log stream for a cluster.

    This method is similar to [ListLogs], but uses server-side streaming, which allows for the `tail -f` command semantics.
    """

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterOperationsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterOperationsResponse,
    ]
    """Retrieves a list of operations for a cluster."""

    ListBackups: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterBackupsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterBackupsResponse,
    ]
    """Retrieves a list of backups for a cluster.

    To list all backups in a folder, make a [BackupService.List] request.
    """

    ListHosts: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterHostsRequest,
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterHostsResponse,
    ]
    """Retrieves a list of hosts for a cluster."""

    AddHosts: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.AddClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Adds new hosts in a cluster."""

    UpdateHosts: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.UpdateClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified hosts."""

    DeleteHosts: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mysql.v1.cluster_service_pb2.DeleteClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified hosts for a cluster."""

class ClusterServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing MySQL clusters."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.GetClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.mysql.v1.cluster_pb2.Cluster, collections.abc.Awaitable[yandex.cloud.mdb.mysql.v1.cluster_pb2.Cluster]]:
        """Retrieves information about a cluster."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClustersRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClustersResponse, collections.abc.Awaitable[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClustersResponse]]:
        """Retrieves the list of clusters in a folder."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.CreateClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a cluster in a folder."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.UpdateClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates a cluster."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.DeleteClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes a cluster."""

    @abc.abstractmethod
    def Start(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StartClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Starts a cluster."""

    @abc.abstractmethod
    def Stop(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StopClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Stops a cluster."""

    @abc.abstractmethod
    def Move(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.MoveClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Moves a cluster to a folder."""

    @abc.abstractmethod
    def Backup(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.BackupClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a backup for a cluster.

        To get information about a backup, make a [BackupService.Get] request.
        """

    @abc.abstractmethod
    def Restore(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.RestoreClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Restores a backup to a new cluster.

        See [the documentation](/docs/managed-mysql/concepts/backup) for details.
        """

    @abc.abstractmethod
    def RescheduleMaintenance(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.RescheduleMaintenanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Reschedules planned maintenance operation."""

    @abc.abstractmethod
    def StartFailover(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StartClusterFailoverRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Starts a manual failover for a cluster."""

    @abc.abstractmethod
    def ListLogs(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterLogsResponse, collections.abc.Awaitable[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterLogsResponse]]:
        """Retrieves logs for a cluster.

        Alternatively, logs can be streamed using [StreamLogs].
        """

    @abc.abstractmethod
    def StreamLogs(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StreamClusterLogsRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StreamLogRecord], collections.abc.AsyncIterator[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.StreamLogRecord]]:
        """Retrieves a log stream for a cluster.

        This method is similar to [ListLogs], but uses server-side streaming, which allows for the `tail -f` command semantics.
        """

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterOperationsResponse, collections.abc.Awaitable[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterOperationsResponse]]:
        """Retrieves a list of operations for a cluster."""

    @abc.abstractmethod
    def ListBackups(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterBackupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterBackupsResponse, collections.abc.Awaitable[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterBackupsResponse]]:
        """Retrieves a list of backups for a cluster.

        To list all backups in a folder, make a [BackupService.List] request.
        """

    @abc.abstractmethod
    def ListHosts(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterHostsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterHostsResponse, collections.abc.Awaitable[yandex.cloud.mdb.mysql.v1.cluster_service_pb2.ListClusterHostsResponse]]:
        """Retrieves a list of hosts for a cluster."""

    @abc.abstractmethod
    def AddHosts(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.AddClusterHostsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Adds new hosts in a cluster."""

    @abc.abstractmethod
    def UpdateHosts(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.UpdateClusterHostsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified hosts."""

    @abc.abstractmethod
    def DeleteHosts(
        self,
        request: yandex.cloud.mdb.mysql.v1.cluster_service_pb2.DeleteClusterHostsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified hosts for a cluster."""

def add_ClusterServiceServicer_to_server(servicer: ClusterServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
