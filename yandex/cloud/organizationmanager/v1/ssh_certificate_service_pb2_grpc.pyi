"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SshCertificateServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Generate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2.GenerateSshCertificateRequest,
        yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2.GenerateSshCertificateResponse,
    ]
    """Members of an organization can generate certificates for themselves
    Signing certificates for other users requires a special permission
    """

class SshCertificateServiceAsyncStub:
    Generate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2.GenerateSshCertificateRequest,
        yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2.GenerateSshCertificateResponse,
    ]
    """Members of an organization can generate certificates for themselves
    Signing certificates for other users requires a special permission
    """

class SshCertificateServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Generate(
        self,
        request: yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2.GenerateSshCertificateRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2.GenerateSshCertificateResponse, collections.abc.Awaitable[yandex.cloud.organizationmanager.v1.ssh_certificate_service_pb2.GenerateSshCertificateResponse]]:
        """Members of an organization can generate certificates for themselves
        Signing certificates for other users requires a special permission
        """

def add_SshCertificateServiceServicer_to_server(servicer: SshCertificateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
