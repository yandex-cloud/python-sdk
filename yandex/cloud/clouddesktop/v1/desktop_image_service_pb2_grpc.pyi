"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.clouddesktop.v1.desktop_image_pb2
import yandex.cloud.clouddesktop.v1.desktop_image_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DesktopImageServiceStub:
    """A service for managing desktop images."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.ListDesktopImagesRequest,
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.ListDesktopImagesResponse,
    ]
    """Lists desktop images in the specified folder."""

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.GetDesktopImageRequest,
        yandex.cloud.clouddesktop.v1.desktop_image_pb2.DesktopImage,
    ]
    """Returns the specified desktop image."""

    Copy: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.CopyDesktopImageRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Copies the specified image to desktop image."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.UpdateDesktopImageRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates desktop image properties."""

    CopyFromDesktop: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.CopyFromDesktopRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Copies the specified desktop image from the specified desktop."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.DeleteDesktopImageRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified desktop image."""

class DesktopImageServiceAsyncStub:
    """A service for managing desktop images."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.ListDesktopImagesRequest,
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.ListDesktopImagesResponse,
    ]
    """Lists desktop images in the specified folder."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.GetDesktopImageRequest,
        yandex.cloud.clouddesktop.v1.desktop_image_pb2.DesktopImage,
    ]
    """Returns the specified desktop image."""

    Copy: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.CopyDesktopImageRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Copies the specified image to desktop image."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.UpdateDesktopImageRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates desktop image properties."""

    CopyFromDesktop: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.CopyFromDesktopRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Copies the specified desktop image from the specified desktop."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.DeleteDesktopImageRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified desktop image."""

class DesktopImageServiceServicer(metaclass=abc.ABCMeta):
    """A service for managing desktop images."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.ListDesktopImagesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.ListDesktopImagesResponse, collections.abc.Awaitable[yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.ListDesktopImagesResponse]]:
        """Lists desktop images in the specified folder."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.GetDesktopImageRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.clouddesktop.v1.desktop_image_pb2.DesktopImage, collections.abc.Awaitable[yandex.cloud.clouddesktop.v1.desktop_image_pb2.DesktopImage]]:
        """Returns the specified desktop image."""

    @abc.abstractmethod
    def Copy(
        self,
        request: yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.CopyDesktopImageRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Copies the specified image to desktop image."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.UpdateDesktopImageRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates desktop image properties."""

    @abc.abstractmethod
    def CopyFromDesktop(
        self,
        request: yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.CopyFromDesktopRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Copies the specified desktop image from the specified desktop."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.clouddesktop.v1.desktop_image_service_pb2.DeleteDesktopImageRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified desktop image."""

def add_DesktopImageServiceServicer_to_server(servicer: DesktopImageServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
