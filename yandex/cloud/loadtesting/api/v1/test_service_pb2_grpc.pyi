"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.loadtesting.api.v1.test.test_pb2
import yandex.cloud.loadtesting.api.v1.test_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TestServiceStub:
    """A set of methods for managing tests."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.CreateTestRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates (runs) a test in the specified folder."""

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.GetTestRequest,
        yandex.cloud.loadtesting.api.v1.test.test_pb2.Test,
    ]
    """Returns the specified test.

    To get the list of all available tests, make a [List] request.
    """

    Stop: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.StopTestRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Stops the specified test."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.DeleteTestRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes specified tests."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.ListTestsRequest,
        yandex.cloud.loadtesting.api.v1.test_service_pb2.ListTestsResponse,
    ]
    """Retrieves the list of test in the specified folder."""

class TestServiceAsyncStub:
    """A set of methods for managing tests."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.CreateTestRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates (runs) a test in the specified folder."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.GetTestRequest,
        yandex.cloud.loadtesting.api.v1.test.test_pb2.Test,
    ]
    """Returns the specified test.

    To get the list of all available tests, make a [List] request.
    """

    Stop: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.StopTestRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Stops the specified test."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.DeleteTestRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes specified tests."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.test_service_pb2.ListTestsRequest,
        yandex.cloud.loadtesting.api.v1.test_service_pb2.ListTestsResponse,
    ]
    """Retrieves the list of test in the specified folder."""

class TestServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing tests."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.loadtesting.api.v1.test_service_pb2.CreateTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates (runs) a test in the specified folder."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.loadtesting.api.v1.test_service_pb2.GetTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.loadtesting.api.v1.test.test_pb2.Test, collections.abc.Awaitable[yandex.cloud.loadtesting.api.v1.test.test_pb2.Test]]:
        """Returns the specified test.

        To get the list of all available tests, make a [List] request.
        """

    @abc.abstractmethod
    def Stop(
        self,
        request: yandex.cloud.loadtesting.api.v1.test_service_pb2.StopTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Stops the specified test."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.loadtesting.api.v1.test_service_pb2.DeleteTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes specified tests."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.loadtesting.api.v1.test_service_pb2.ListTestsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.loadtesting.api.v1.test_service_pb2.ListTestsResponse, collections.abc.Awaitable[yandex.cloud.loadtesting.api.v1.test_service_pb2.ListTestsResponse]]:
        """Retrieves the list of test in the specified folder."""

def add_TestServiceServicer_to_server(servicer: TestServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
