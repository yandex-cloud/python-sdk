"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.loadtesting.api.v1.agent.agent_pb2
import yandex.cloud.loadtesting.api.v1.agent_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AgentServiceStub:
    """A set of methods for managing Load Testing agents."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.CreateAgentRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates an agent in the specified folder.

    Also creates a corresponding compute instance.
    """

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.GetAgentRequest,
        yandex.cloud.loadtesting.api.v1.agent.agent_pb2.Agent,
    ]
    """Returns the specified agent.

    To get the list of all available agents, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.ListAgentsRequest,
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.ListAgentsResponse,
    ]
    """Retrieves the list of agents in the specified folder."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.DeleteAgentRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified agent.

    Also deletes a corresponding compute instance.
    """

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.UpdateAgentRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified agent."""

class AgentServiceAsyncStub:
    """A set of methods for managing Load Testing agents."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.CreateAgentRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates an agent in the specified folder.

    Also creates a corresponding compute instance.
    """

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.GetAgentRequest,
        yandex.cloud.loadtesting.api.v1.agent.agent_pb2.Agent,
    ]
    """Returns the specified agent.

    To get the list of all available agents, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.ListAgentsRequest,
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.ListAgentsResponse,
    ]
    """Retrieves the list of agents in the specified folder."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.DeleteAgentRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified agent.

    Also deletes a corresponding compute instance.
    """

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.agent_service_pb2.UpdateAgentRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified agent."""

class AgentServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing Load Testing agents."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.loadtesting.api.v1.agent_service_pb2.CreateAgentRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates an agent in the specified folder.

        Also creates a corresponding compute instance.
        """

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.loadtesting.api.v1.agent_service_pb2.GetAgentRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.loadtesting.api.v1.agent.agent_pb2.Agent, collections.abc.Awaitable[yandex.cloud.loadtesting.api.v1.agent.agent_pb2.Agent]]:
        """Returns the specified agent.

        To get the list of all available agents, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.loadtesting.api.v1.agent_service_pb2.ListAgentsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.loadtesting.api.v1.agent_service_pb2.ListAgentsResponse, collections.abc.Awaitable[yandex.cloud.loadtesting.api.v1.agent_service_pb2.ListAgentsResponse]]:
        """Retrieves the list of agents in the specified folder."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.loadtesting.api.v1.agent_service_pb2.DeleteAgentRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified agent.

        Also deletes a corresponding compute instance.
        """

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.loadtesting.api.v1.agent_service_pb2.UpdateAgentRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified agent."""

def add_AgentServiceServicer_to_server(servicer: AgentServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
