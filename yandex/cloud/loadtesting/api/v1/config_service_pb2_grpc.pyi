"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.loadtesting.api.v1.config.config_pb2
import yandex.cloud.loadtesting.api.v1.config_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ConfigServiceStub:
    """A set of methods for managing test configurations."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.CreateConfigRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a test config in the specified folder."""

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.GetConfigRequest,
        yandex.cloud.loadtesting.api.v1.config.config_pb2.Config,
    ]
    """Returns the specified config.

    To get the list of all available configs, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.ListConfigsRequest,
        yandex.cloud.loadtesting.api.v1.config_service_pb2.ListConfigsResponse,
    ]
    """Retrieves the list of configs in the specified folder."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.DeleteConfigRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified config."""

class ConfigServiceAsyncStub:
    """A set of methods for managing test configurations."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.CreateConfigRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a test config in the specified folder."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.GetConfigRequest,
        yandex.cloud.loadtesting.api.v1.config.config_pb2.Config,
    ]
    """Returns the specified config.

    To get the list of all available configs, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.ListConfigsRequest,
        yandex.cloud.loadtesting.api.v1.config_service_pb2.ListConfigsResponse,
    ]
    """Retrieves the list of configs in the specified folder."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.api.v1.config_service_pb2.DeleteConfigRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified config."""

class ConfigServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing test configurations."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.loadtesting.api.v1.config_service_pb2.CreateConfigRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a test config in the specified folder."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.loadtesting.api.v1.config_service_pb2.GetConfigRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.loadtesting.api.v1.config.config_pb2.Config, collections.abc.Awaitable[yandex.cloud.loadtesting.api.v1.config.config_pb2.Config]]:
        """Returns the specified config.

        To get the list of all available configs, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.loadtesting.api.v1.config_service_pb2.ListConfigsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.loadtesting.api.v1.config_service_pb2.ListConfigsResponse, collections.abc.Awaitable[yandex.cloud.loadtesting.api.v1.config_service_pb2.ListConfigsResponse]]:
        """Retrieves the list of configs in the specified folder."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.loadtesting.api.v1.config_service_pb2.DeleteConfigRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified config."""

def add_ConfigServiceServicer_to_server(servicer: ConfigServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
