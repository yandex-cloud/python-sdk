"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MonitoringServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    AddMetric: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2.AddMetricRequest,
        yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2.AddMetricResponse,
    ]
    """Saves monitoring events for specified job"""

class MonitoringServiceAsyncStub:
    AddMetric: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2.AddMetricRequest,
        yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2.AddMetricResponse,
    ]
    """Saves monitoring events for specified job"""

class MonitoringServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def AddMetric(
        self,
        request: yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2.AddMetricRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2.AddMetricResponse, collections.abc.Awaitable[yandex.cloud.loadtesting.agent.v1.monitoring_service_pb2.AddMetricResponse]]:
        """Saves monitoring events for specified job"""

def add_MonitoringServiceServicer_to_server(servicer: MonitoringServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
