"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.operation.operation_pb2
import yandex.cloud.vpc.v1.route_table_pb2
import yandex.cloud.vpc.v1.route_table_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class RouteTableServiceStub:
    """A set of methods for managing RouteTable resources."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.GetRouteTableRequest,
        yandex.cloud.vpc.v1.route_table_pb2.RouteTable,
    ]
    """Returns the specified RouteTable resource.

    To get the list of available RouteTable resources, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTablesRequest,
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTablesResponse,
    ]
    """Retrieves the list of RouteTable resources in the specified folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.CreateRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a route table in the specified folder and network.
    Method starts an asynchronous operation that can be cancelled while it is in progress.
    """

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.UpdateRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified route table.
    Method starts an asynchronous operation that can be cancelled while it is in progress.
    """

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.DeleteRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified route table."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTableOperationsRequest,
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTableOperationsResponse,
    ]
    """List operations for the specified route table."""

    Move: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.MoveRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Move route table to another folder."""

class RouteTableServiceAsyncStub:
    """A set of methods for managing RouteTable resources."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.GetRouteTableRequest,
        yandex.cloud.vpc.v1.route_table_pb2.RouteTable,
    ]
    """Returns the specified RouteTable resource.

    To get the list of available RouteTable resources, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTablesRequest,
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTablesResponse,
    ]
    """Retrieves the list of RouteTable resources in the specified folder."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.CreateRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a route table in the specified folder and network.
    Method starts an asynchronous operation that can be cancelled while it is in progress.
    """

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.UpdateRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified route table.
    Method starts an asynchronous operation that can be cancelled while it is in progress.
    """

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.DeleteRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified route table."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTableOperationsRequest,
        yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTableOperationsResponse,
    ]
    """List operations for the specified route table."""

    Move: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.vpc.v1.route_table_service_pb2.MoveRouteTableRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Move route table to another folder."""

class RouteTableServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing RouteTable resources."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.vpc.v1.route_table_service_pb2.GetRouteTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.vpc.v1.route_table_pb2.RouteTable, collections.abc.Awaitable[yandex.cloud.vpc.v1.route_table_pb2.RouteTable]]:
        """Returns the specified RouteTable resource.

        To get the list of available RouteTable resources, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTablesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTablesResponse, collections.abc.Awaitable[yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTablesResponse]]:
        """Retrieves the list of RouteTable resources in the specified folder."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.vpc.v1.route_table_service_pb2.CreateRouteTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a route table in the specified folder and network.
        Method starts an asynchronous operation that can be cancelled while it is in progress.
        """

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.vpc.v1.route_table_service_pb2.UpdateRouteTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified route table.
        Method starts an asynchronous operation that can be cancelled while it is in progress.
        """

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.vpc.v1.route_table_service_pb2.DeleteRouteTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified route table."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTableOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTableOperationsResponse, collections.abc.Awaitable[yandex.cloud.vpc.v1.route_table_service_pb2.ListRouteTableOperationsResponse]]:
        """List operations for the specified route table."""

    @abc.abstractmethod
    def Move(
        self,
        request: yandex.cloud.vpc.v1.route_table_service_pb2.MoveRouteTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Move route table to another folder."""

def add_RouteTableServiceServicer_to_server(servicer: RouteTableServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
