"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.iam.v1.service_control_pb2
import yandex.cloud.iam.v1.service_control_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ServiceControlServiceStub:
    """A set of methods for managing Service resources."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.GetServiceRequest,
        yandex.cloud.iam.v1.service_control_pb2.Service,
    ]
    """Returns the Service information in the specified resource container.

    To get the list of available Services, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.ListServicesRequest,
        yandex.cloud.iam.v1.service_control_service_pb2.ListServicesResponse,
    ]
    """Retrieves the list of Service in the specified resource container."""

    Enable: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.EnableServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Enable a service in the specified resource container."""

    Resume: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.ResumeServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Resume a service in the specified resource container."""

    Pause: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.PauseServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Pause a service in the specified resource container."""

    Disable: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.DisableServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Disable a service in the specified resource container."""

class ServiceControlServiceAsyncStub:
    """A set of methods for managing Service resources."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.GetServiceRequest,
        yandex.cloud.iam.v1.service_control_pb2.Service,
    ]
    """Returns the Service information in the specified resource container.

    To get the list of available Services, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.ListServicesRequest,
        yandex.cloud.iam.v1.service_control_service_pb2.ListServicesResponse,
    ]
    """Retrieves the list of Service in the specified resource container."""

    Enable: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.EnableServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Enable a service in the specified resource container."""

    Resume: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.ResumeServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Resume a service in the specified resource container."""

    Pause: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.PauseServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Pause a service in the specified resource container."""

    Disable: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.service_control_service_pb2.DisableServiceRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Disable a service in the specified resource container."""

class ServiceControlServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing Service resources."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.iam.v1.service_control_service_pb2.GetServiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.iam.v1.service_control_pb2.Service, collections.abc.Awaitable[yandex.cloud.iam.v1.service_control_pb2.Service]]:
        """Returns the Service information in the specified resource container.

        To get the list of available Services, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.iam.v1.service_control_service_pb2.ListServicesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.iam.v1.service_control_service_pb2.ListServicesResponse, collections.abc.Awaitable[yandex.cloud.iam.v1.service_control_service_pb2.ListServicesResponse]]:
        """Retrieves the list of Service in the specified resource container."""

    @abc.abstractmethod
    def Enable(
        self,
        request: yandex.cloud.iam.v1.service_control_service_pb2.EnableServiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Enable a service in the specified resource container."""

    @abc.abstractmethod
    def Resume(
        self,
        request: yandex.cloud.iam.v1.service_control_service_pb2.ResumeServiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Resume a service in the specified resource container."""

    @abc.abstractmethod
    def Pause(
        self,
        request: yandex.cloud.iam.v1.service_control_service_pb2.PauseServiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Pause a service in the specified resource container."""

    @abc.abstractmethod
    def Disable(
        self,
        request: yandex.cloud.iam.v1.service_control_service_pb2.DisableServiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Disable a service in the specified resource container."""

def add_ServiceControlServiceServicer_to_server(servicer: ServiceControlServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
