"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.iam.v1.access_analyzer_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AccessAnalyzerServiceStub:
    """A set of methods for access analysis."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListSubjectAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.access_analyzer_service_pb2.ListSubjectAccessBindingsRequest,
        yandex.cloud.iam.v1.access_analyzer_service_pb2.ListSubjectAccessBindingsResponse,
    ]
    """Returns the list of access bindings for the specified subject in chosen organization."""

class AccessAnalyzerServiceAsyncStub:
    """A set of methods for access analysis."""

    ListSubjectAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.access_analyzer_service_pb2.ListSubjectAccessBindingsRequest,
        yandex.cloud.iam.v1.access_analyzer_service_pb2.ListSubjectAccessBindingsResponse,
    ]
    """Returns the list of access bindings for the specified subject in chosen organization."""

class AccessAnalyzerServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for access analysis."""

    @abc.abstractmethod
    def ListSubjectAccessBindings(
        self,
        request: yandex.cloud.iam.v1.access_analyzer_service_pb2.ListSubjectAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.iam.v1.access_analyzer_service_pb2.ListSubjectAccessBindingsResponse, collections.abc.Awaitable[yandex.cloud.iam.v1.access_analyzer_service_pb2.ListSubjectAccessBindingsResponse]]:
        """Returns the list of access bindings for the specified subject in chosen organization."""

def add_AccessAnalyzerServiceServicer_to_server(servicer: AccessAnalyzerServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
