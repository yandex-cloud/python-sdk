"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.iam.v1.user_account_pb2
import yandex.cloud.iam.v1.user_account_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class UserAccountServiceStub:
    """A set of methods for managing user accounts. Currently applicable only for [Yandex accounts](/docs/iam/concepts/#passport)."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.user_account_service_pb2.GetUserAccountRequest,
        yandex.cloud.iam.v1.user_account_pb2.UserAccount,
    ]
    """Returns the specified UserAccount resource."""

class UserAccountServiceAsyncStub:
    """A set of methods for managing user accounts. Currently applicable only for [Yandex accounts](/docs/iam/concepts/#passport)."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.user_account_service_pb2.GetUserAccountRequest,
        yandex.cloud.iam.v1.user_account_pb2.UserAccount,
    ]
    """Returns the specified UserAccount resource."""

class UserAccountServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing user accounts. Currently applicable only for [Yandex accounts](/docs/iam/concepts/#passport)."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.iam.v1.user_account_service_pb2.GetUserAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.iam.v1.user_account_pb2.UserAccount, collections.abc.Awaitable[yandex.cloud.iam.v1.user_account_pb2.UserAccount]]:
        """Returns the specified UserAccount resource."""

def add_UserAccountServiceServicer_to_server(servicer: UserAccountServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
