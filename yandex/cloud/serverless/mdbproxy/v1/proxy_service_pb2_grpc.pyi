"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.access.access_pb2
import yandex.cloud.operation.operation_pb2
import yandex.cloud.serverless.mdbproxy.v1.proxy_pb2
import yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ProxyServiceStub:
    """A set of methods for managing serverless MDB proxy."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.GetProxyRequest,
        yandex.cloud.serverless.mdbproxy.v1.proxy_pb2.Proxy,
    ]
    """Returns the specified proxy.

    To get the list of all available proxies, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyRequest,
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyResponse,
    ]
    """Retrieves the list of proxies in the specified folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.CreateProxyRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a proxy in the specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.UpdateProxyRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified proxy."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.DeleteProxyRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified proxy."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyOperationsRequest,
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyOperationsResponse,
    ]
    """Lists operations for the specified proxy."""

    ListAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        yandex.cloud.access.access_pb2.ListAccessBindingsResponse,
    ]
    """Lists existing access bindings for the specified proxy."""

    SetAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Sets access bindings for the proxy."""

    UpdateAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates access bindings for the specified proxy."""

class ProxyServiceAsyncStub:
    """A set of methods for managing serverless MDB proxy."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.GetProxyRequest,
        yandex.cloud.serverless.mdbproxy.v1.proxy_pb2.Proxy,
    ]
    """Returns the specified proxy.

    To get the list of all available proxies, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyRequest,
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyResponse,
    ]
    """Retrieves the list of proxies in the specified folder."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.CreateProxyRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a proxy in the specified folder."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.UpdateProxyRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates the specified proxy."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.DeleteProxyRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified proxy."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyOperationsRequest,
        yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyOperationsResponse,
    ]
    """Lists operations for the specified proxy."""

    ListAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        yandex.cloud.access.access_pb2.ListAccessBindingsResponse,
    ]
    """Lists existing access bindings for the specified proxy."""

    SetAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Sets access bindings for the proxy."""

    UpdateAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates access bindings for the specified proxy."""

class ProxyServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing serverless MDB proxy."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.GetProxyRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.serverless.mdbproxy.v1.proxy_pb2.Proxy, collections.abc.Awaitable[yandex.cloud.serverless.mdbproxy.v1.proxy_pb2.Proxy]]:
        """Returns the specified proxy.

        To get the list of all available proxies, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyResponse, collections.abc.Awaitable[yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyResponse]]:
        """Retrieves the list of proxies in the specified folder."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.CreateProxyRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a proxy in the specified folder."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.UpdateProxyRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates the specified proxy."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.DeleteProxyRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified proxy."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyOperationsResponse, collections.abc.Awaitable[yandex.cloud.serverless.mdbproxy.v1.proxy_service_pb2.ListProxyOperationsResponse]]:
        """Lists operations for the specified proxy."""

    @abc.abstractmethod
    def ListAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.ListAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.access.access_pb2.ListAccessBindingsResponse, collections.abc.Awaitable[yandex.cloud.access.access_pb2.ListAccessBindingsResponse]]:
        """Lists existing access bindings for the specified proxy."""

    @abc.abstractmethod
    def SetAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.SetAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Sets access bindings for the proxy."""

    @abc.abstractmethod
    def UpdateAccessBindings(
        self,
        request: yandex.cloud.access.access_pb2.UpdateAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates access bindings for the specified proxy."""

def add_ProxyServiceServicer_to_server(servicer: ProxyServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
